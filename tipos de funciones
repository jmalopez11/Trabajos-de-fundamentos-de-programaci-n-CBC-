{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMTdXOko+rbCbEYlp7VWtag"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Función Max"],"metadata":{"id":"m117RS-3OUkl"}},{"cell_type":"code","source":["print(max(2, 3)) # Devuelve 3 ya que 3 es el mayor de los dos valores\n","print(max(2, 3, 23)) # Devuelve 23 ya que 23 es el mayor de todos los valores\n","\n","list1 = [1, 2, 4, 5, 54]\n","print(max(list1)) # Devuelve 54 ya que 54 es el valor más grande de la lista\n","\n","list2 = ['a', 'b', 'c' ]\n","print(max(list2)) # Devuelve 'c' ya que 'c' es el valor más grande en la lista porque 'c' tiene un valor ascii mayor que 'a' ,'b'.\n","\n","list3 = [1, 2, 'abc', 'xyz']\n","print(max(list3)) # Se genera TypeError ya que los valores en la lista son de tipos diferentes\n","\n","#Soluciona el TypeError mencionado anterioremente antes de continuar con el siguiente paso\n","\n","list4 = []\n","print(max(list4)) # Se genera ValueError ya que el argumento está vacío"],"metadata":{"id":"ime2oYXOObeu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función Min"],"metadata":{"id":"xKWck63wO6dj"}},{"cell_type":"code","source":["print(min(2, 3)) # Devuelve 2 ya que 2 es el más pequeño de los dos valores\n","print(min(2, 3, -1)) # Devuelve -1 ya que -1 es el más pequeño de los dos valores\n","\n","list1 = [1, 2, 4, 5, -54]\n","print(min(list1)) # Devuelve -54 ya que -54 es el más pequeño de los valores en la lista.\n","\n","list2 = ['a', 'b', 'c' ]\n","print(min(list2)) # Devuelve 'a' ya que 'a' es el valor más pequeño de la lissta en orden alfabético\n","\n","list3 = [1, 2, 'abc', 'xyz']\n","print(min(list3)) # Se genera TypeError ya que los valores en la lista son de tipos diferentes\n","\n","#Soluciona el TypeError mencionado anterioremente antes de continuar con el siguiente paso\n","\n","list4 = []\n","print(min(list4)) # Se genera ValueError ya que el argumento está vacío"],"metadata":{"id":"Tv0IXIHOO8Q7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función Divmod"],"metadata":{"id":"M8b-dSS4QI4n"}},{"cell_type":"code","source":["print(divmod(5,2)) # muestra (2,1)\n","print(divmod(13.5,2.5)) # muestra (5.0, 1.0)\n","q,r = divmod(13.5,2.5)  # Asigna q=cociente & r=resto\n","print(q) # muestra 5.0 porque math.floor(13.5/2.5) = 5.0\n","print(r) # muestra 1.0 porque (13.5 % 2.5) = 1.0"],"metadata":{"id":"ahHgWhitQVhh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función hex(x)"],"metadata":{"id":"UiKCkU72QoNN"}},{"cell_type":"code","source":["print(hex(16))    # muestra  0x10\n","print(hex(-298))  # muestra -0x12a\n","print(hex(543))   # muestra  0x21f"],"metadata":{"id":"oFcxo0dtQsvT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función len"],"metadata":{"id":"VgBKtcJbQyHT"}},{"cell_type":"code","source":["list1 = [123, 'xyz', 'zara'] # lista\n","print(len(list1)) # muestra 3 ya que hay 3 elementos en list1\n","\n","str1 = 'basketball' # string\n","print(len(str1)) # muestra 10 ya que str1 tiene 10 carácteres\n","\n","tuple1 = (2, 3, 4, 5) # tuple \n","print(len(tuple1)) # muestra 4 ya que hay 4 elementos en tuple1\n","\n","dict1 = {'name': 'John', 'age': 4, 'score': 45} # dictionary\n","print(len(dict1)) # muestra 3 ya que hay 3 pares clave/valor "],"metadata":{"id":"KoV6gU2uQ4GI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función ord"],"metadata":{"id":"j4L-jO-JRbro"}},{"cell_type":"code","source":[">>> ord('d')\n","100\n",">>> ord('1')\n","49"],"metadata":{"id":"XBC0ArpbRehs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Función CHR"],"metadata":{"id":"Y_WoPcabRvfb"}},{"cell_type":"code","source":[">>> chr(-10)\n","'Traceback (most recent call last):\n","  File \"<pyshell#24>\", line 1, in <module>\n","    chr(-1)\n","ValueError: chr() arg not in range(0x110000)'"],"metadata":{"id":"ptpkb4FzRxWg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Funciones de manejo de cadenas"],"metadata":{"id":"gr6tL7sIYHN4"}},{"cell_type":"code","source":["Capitalize\n","1 mensaje1 = str.capitalize('esto es una PRUEBA de capitalize')\n","2 print(mensaje1)"],"metadata":{"id":"e22l6eiIYLXo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["LOWER, UPPER, TITLE, SWAPCASE"],"metadata":{"id":"h9v-QFalYY46"}},{"cell_type":"code","source":["#lower, upper, title, swapcase\n"," \n","texto = input(\"Introduzca un texto: \")\n"," \n","print(\"Aplicando lower() al texto: \",texto.lower())\n","print(\"Aplicando upper() al texto: \",texto.upper())\n","print(\"Aplicando title() al texto: \",texto.title())\n","print(\"Aplicando swapcase() al texto: \",texto.swapcase())"],"metadata":{"id":"SB5EJTrvYf0S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Fechas"],"metadata":{"id":"hB08meYvcwBg"}},{"cell_type":"code","source":["#Es necesario importar las depencendias necesarias\n","from datetime import date\n","from datetime import datetime\n","\n","#Día actual\n","today = date.today()\n","\n","#Fecha actual\n","now = datetime.now()\n","\n","print(today)\n","print(now)\n","\n","#Date\n","print(\"El día actual es {}\".format(today.day))\n","print(\"El mes actual es {}\".format(today.month))\n","print(\"El año actual es {}\".format(today.year))\n","\n","\n","#Datetime\n","print(\"El día actual es {}\".format(now.day))\n","print(\"El mes actual es {}\".format(now.month))\n","print(\"El año actual es {}\".format(now.year))\n","\n","print(\"La hora actual es {}\".format(now.hour))\n","print(\"El minuto actual es {}\".format(now.minute))\n","print(\"El segundo actual es {}\".format(now.second))"],"metadata":{"id":"qFEUdjKOcxZZ"},"execution_count":null,"outputs":[]}]}